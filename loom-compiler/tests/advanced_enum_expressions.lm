// Advanced enum expression parsing test
import std::io::{printf, print, println};

// Enum with arithmetic expressions
enum Math {
    PI(3.14159),
    E(2.71828),
    TAU(6.28318),
    HALF_PI(1.57080);
    
    constructor(value: f64) {
        // Constructor for Math enum
    }
}

// Enum with complex arithmetic expressions
enum Calculations {
    SUM(10 + 20),
    PRODUCT(5 * 6),
    DIFFERENCE(100 - 50),
    QUOTIENT(100 / 4),
    POWER(2 * 2 * 2 * 2),
    COMPLEX((10 + 5) * 2);
    
    constructor(result: i32) {
        // Constructor for Calculations enum
    }
}

// Enum with mixed type expressions
enum Mixed {
    TEXT("Hello"),
    NUMBER(42),
    BOOLEAN(true),
    FLOAT(3.14),
    EXPRESSION(10 + 32);
    
    constructor(value: string) {
        // Constructor for Mixed enum
    }
}

// Enum with nested expressions
enum Nested {
    LEVEL1(1),
    LEVEL2(1 + 1),
    LEVEL3(1 + 1 + 1),
    LEVEL4(1 + 1 + 1 + 1);
    
    constructor(level: i32) {
        // Constructor for Nested enum
    }
}

print("Advanced enum expression parsing test completed successfully!");
print("Complex expressions in enum constants work correctly:");
print("- Arithmetic: SUM(10 + 20) = 30");
print("- Mixed types: TEXT(Hello), NUMBER(42)");
print("- Nested expressions: LEVEL4(1 + 1 + 1 + 1) = 4");
print("- Mathematical constants: PI(3.14159), E(2.71828)"); 