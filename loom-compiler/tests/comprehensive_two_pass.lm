// Comprehensive test for two-pass compilation
// Demonstrates forward references for functions, classes, and variables

// Test 1: Function forward references
pub func main() -> i64 {
    // Call functions defined later
    var sum -> i64 = calculateSum(10, 20);
    var message -> string = formatMessage("Hello", "World");
    
    // Use classes defined later
    var obj1 -> MyClass = new MyClass("Test Object");
    var obj2 -> AnotherClass = new AnotherClass(42);
    
    // Use variables defined later
    var result -> i64 = globalValue + sum;
    
    return result;
}

// Functions defined after they're used
pub func calculateSum(a: i64, b: i64) -> i64 {
    return a + b;
}

pub func formatMessage(prefix: string, suffix: string) -> string {
    return prefix + " " + suffix + "!";
}

// Classes defined after they're used
pub class MyClass -> Object {
    pub var name -> string;
    
    constructor(name: string) {
        self.name = name;
    }
    
    pub func getName() -> string {
        return name;
    }
}

pub class AnotherClass -> Object {
    pub var value -> i64;
    
    constructor(value: i64) {
        self.value = value;
    }
    
    pub func getValue() -> i64 {
        return value;
    }
}

// Global variable defined after it's used
pub var globalValue -> i64 = 100;

// Test 2: Class member forward references
pub class TestClass -> Object {
    pub var value -> i64;
    
    constructor(value: i64) {
        self.value = value;
    }
    
    // Method can call other methods defined later
    pub func process() -> i64 {
        return self.value + self.getMultiplier();
    }
    
    // Method defined after it's used
    pub func getMultiplier() -> i64 {
        return 2;
    }
}

// Test 3: Nested class forward references
pub class OuterClass -> Object {
    pub var outerValue -> i64;
    
    constructor(value: i64) {
        self.outerValue = value;
    }
    
    // Inner class can reference outer class methods
    pub class InnerClass -> Object {
        pub var innerValue -> i64;
        
        constructor(value: i64) {
            self.innerValue = value;
        }
        
        pub func getCombinedValue(outer: OuterClass) -> i64 {
            return outer.outerValue + self.innerValue;
        }
    }
} 