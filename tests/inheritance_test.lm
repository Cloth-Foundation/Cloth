// Test inheritance and protected access
import std::io::{printf, print, println};

// Base class with protected members
class Animal -> Object {
    prot var name -> string;
    prot var age -> i32;
    
    constructor(name: string, age: i32) {
        self.name = name;
        self.age = age;
    }
    
    prot func getInfo() -> string {
        return "Animal: " + self.name + ", age: " + self.age;
    }
}

// Derived class that can access protected members
class Dog -> Animal {
    priv var breed -> string;
    
    constructor(name: string, age: i32, breed: string) {
        // Call parent constructor
        // self.name = name;  // This should work - accessing protected member
        // self.age = age;    // This should work - accessing protected member
        self.breed = breed;
    }
    
    func getDogInfo() -> string {
        // This should work - accessing protected method and fields
        return self.getInfo() + ", breed: " + self.breed;
    }
}

// Another derived class
class Cat -> Animal {
    priv var color -> string;
    
    constructor(name: string, age: i32, color: string) {
        // self.name = name;  // This should work
        // self.age = age;    // This should work
        self.color = color;
    }
    
    func getCatInfo() -> string {
        // This should work - accessing protected method and fields
        return self.getInfo() + ", color: " + self.color;
    }
}

// Test the inheritance
func main() {
    var dog -> Dog = new Dog("Buddy", 5, "Golden Retriever");
    var cat -> Cat = new Cat("Whiskers", 3, "Orange");
    
    print(dog.getDogInfo());
    print(cat.getCatInfo());
} 