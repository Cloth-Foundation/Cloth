// Test access control - private members should not be accessible from outside
import std::io::{printf, print, println};

class Animal -> Object {
    priv var secret -> string;
    prot var name -> string;
    pub var publicInfo -> string;
    
    constructor(name: string) {
        self.name = name;
        self.secret = "secret data";
        self.publicInfo = "public data";
    }
    
    priv func privateMethod() -> string {
        return self.secret;
    }
    
    prot func protectedMethod() -> string {
        return self.name;
    }
    
    pub func publicMethod() -> string {
        return self.publicInfo;
    }
}

class Dog -> Animal {
    priv var breed -> string;
    
    constructor(name: string, breed: string) {
        self.name = name;  // This should work - accessing protected member
        self.breed = breed;
    }
    
    func testAccess() -> string {
        // This should work - accessing protected method from parent
        var parentName -> string = self.protectedMethod();
        
        // This should work - accessing public method from parent
        var publicData -> string = self.publicMethod();
        
        return parentName + " (" + self.breed + ") - " + publicData;
    }
}

func main() {
    var animal -> Animal = new Animal("Generic Animal");
    var dog -> Dog = new Dog("Buddy", "Golden Retriever");
    
    // These should work - public access
    print(animal.publicMethod());
    print(dog.publicMethod());
    
    // This should work - protected access from derived class
    print(dog.testAccess());
    
    // These would cause access control errors if uncommented:
    // print(animal.privateMethod());  // Error: private method
    // print(animal.protectedMethod()); // Error: protected method from outside
    // print(animal.name);  // Error: protected field from outside
    // print(animal.secret); // Error: private field from outside
    // print(dog.breed);  // Error: private field from outside
} 