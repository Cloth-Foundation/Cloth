// Test struct instantiation parsing and type checking

import std::io::{printf};

pub struct Point {
    x -> i32;
    y -> i32;
}

struct Person {
    name -> string;
    age -> i32;
}

// Valid struct instantiation
var p1 -> Point = Point { x: 1, y: 2 };
var p2 -> Person = Person { name: "Alice", age: 25 };

// Test with different field order
var p3 -> Point = Point { y: 10, x: 5 };

// These should cause errors:
// var p4 -> Point = Point { x: 1 }; // Missing field
// var p5 -> Point = Point { x: 1, y: 2, z: 3 }; // Extra field
// var p6 -> Point = Point { x: "hello", y: 2 }; // Type mismatch

pub func structCaller(person: Person) -> void {
    printf("Person: %s, Age: %d\n", person.name, person.age);
}

pub func main() -> void {
    // Print the points to verify instantiation
    printf("Point 1: (%d, %d)\n", p1.x, p1.y);
    printf("Point 2: (%s, %d)\n", p2.name, p2.age);
    printf("Point 3: (%d, %d)\n", p3.x, p3.y);

    // Uncommenting the following lines should cause type errors
    // printf("Point 4: (%d, %d)\n", p4.x, p4.y);
    // printf("Point 5: (%d, %d)\n", p5.x, p5.y);
    // printf("Point 6: (%s, %d)\n", p6.x, p6.y);

    structCaller(Person { name: "Bob", age: 30 });
}